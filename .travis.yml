# Build matrix / environment variable are explained on:
# http://about.travis-ci.org/docs/user/build-configuration/

language: cpp

compiler:
  - gcc
  - clang

os:
  - linux
  - osx

# enable using trusty beta ubuntu
sudo: required
dist: trusty

# install build requirements
before_install:  
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then 
      pip install --user codecov;
      sudo apt-get update -qq;
      sudo apt-get install -y libsdl2-dev;
      sudo apt-get install -y libglew-dev;
      sudo add-apt-repository -y ppa:oibaf/graphics-drivers;
      sudo apt-get update -qq;
      sudo apt-get -yq --force-yes install libgl1-mesa-dev libgl1-mesa-glx mesa-common-dev libglapi-mesa libgles2-mesa libgles2-mesa-dev libegl1-mesa-dev libgbm1 libgl1-mesa-dri libva1 libxatracker-dev;
      sudo apt-get -yq --force-yes install xserver-xorg-video-vmware-lts-trusty;
      sudo apt-get -yq --force-yes install xserver-xorg-dev x11proto-xinerama-dev libx11-xcb-dev;
      sudo apt-get -yq --force-yes install libxcb-glx0-dev libxrender-dev;
      sudo apt-get -y install linux-headers-$(uname -r) xutils-dev;
      sudo apt-get -yq --force-yes build-dep libgl1-mesa-dri libxcb-glx0-dev;
      sudo apt-get install -y libglu1-mesa-dev;
      sudo apt-get install -y xorg-dev;
      sudo apt-get install -y mesa-utils;
      sudo apt-get -yq --force-yes build-dep libgl1-mesa-dri libxcb-glx0-dev;
      glxinfo | grep OpenGL;
      /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac -screen 0 1280x1024x16;
    fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then 
      pip install --user codecov;
      brew update;
      brew upgrade cmake;
      brew install sdl2;
      brew install glew;
    fi

env:
  - MAKE_TARGET=install CMAKE_BUILD_TYPE=Debug
  - MAKE_TARGET=test CMAKE_BUILD_TYPE=Debug
  - MAKE_TARGET=install CMAKE_BUILD_TYPE=Release
  - MAKE_TARGET=test CMAKE_BUILD_TYPE=Release

before_script:
  - cd build
  # only generate coverage report if building test and cmake build type is Debug
  - if [ "$MAKE_TARGET" == "test" ] && [ "$CMAKE_BUILD_TYPE" == "Debug" ]; then
      cmake -Dbuild_test=ON -Dgen_coverage=ON -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE ..;
    elif [ "$MAKE_TARGET" == "test" ]; then
      cmake -Dbuild_test=ON -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE ..;
    else
      cmake -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE ..;
    fi

script: 
  - make
  - CTEST_OUTPUT_ON_FAILURE=1 make $MAKE_TARGET
  - if [ "$MAKE_TARGET" == "install" ]; then
      cd ..; 
      ./myapp -y;
    fi

after_success:
  # only upload coverage report in test
  - if [ "$MAKE_TARGET" == "test" ]; then
      codecov;
    fi